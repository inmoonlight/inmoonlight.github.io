<!doctype html>
<html lang="en"><head><meta charset="utf-8"><meta name="generator" content="Hexo 4.2.1"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><meta><title>PyTorch의 view, transpose, reshape 함수의 차이점 이해하기 - Space Moon</title><meta description="최근에 pytorch로 간단한 모듈을 재구현하다가 loss와 dev score가 원래 구현된 결과와 달라서 의아해하던 찰나, tensor 차원을 변경하는 과정에서 의도하지 않은 방향으로 구현된 것을 확인하게 되었다. 그리고 그 이유는 transpose 와 view 의 기능을 헷갈려했기 때문이었다. 두 함수의 차이는 contiguous 를 이해해야 알 수 있"><meta property="og:type" content="blog"><meta property="og:title" content="PyTorch의 view, transpose, reshape 함수의 차이점 이해하기"><meta property="og:url" content="https://www.thespacemoon.com/2021/03/03/pytorch-view-reshape-transpose"><meta property="og:site_name" content="Space Moon"><meta property="og:description" content="최근에 pytorch로 간단한 모듈을 재구현하다가 loss와 dev score가 원래 구현된 결과와 달라서 의아해하던 찰나, tensor 차원을 변경하는 과정에서 의도하지 않은 방향으로 구현된 것을 확인하게 되었다. 그리고 그 이유는 transpose 와 view 의 기능을 헷갈려했기 때문이었다. 두 함수의 차이는 contiguous 를 이해해야 알 수 있"><meta property="og:locale" content="en_US"><meta property="og:image" content="https://www.thespacemoon.com/img/og_image.png"><meta property="article:published_time" content="2021-03-02T19:22:00.000Z"><meta property="article:modified_time" content="2024-01-24T15:31:09.844Z"><meta property="article:author" content="Jihyung Moon"><meta property="article:tag" content="pytorch"><meta property="twitter:card" content="summary"><meta property="twitter:image" content="/img/og_image.png"><script type="application/ld+json">{"@context":"https://schema.org","@type":"BlogPosting","mainEntityOfPage":{"@type":"WebPage","@id":"https://www.thespacemoon.com/2021/03/03/pytorch-view-reshape-transpose"},"headline":"Space Moon","image":["https://www.thespacemoon.com/img/og_image.png"],"datePublished":"2021-03-02T19:22:00.000Z","dateModified":"2024-01-24T15:31:09.844Z","author":{"@type":"Person","name":"Jihyung Moon"},"description":"최근에 pytorch로 간단한 모듈을 재구현하다가 loss와 dev score가 원래 구현된 결과와 달라서 의아해하던 찰나, tensor 차원을 변경하는 과정에서 의도하지 않은 방향으로 구현된 것을 확인하게 되었다. 그리고 그 이유는 transpose 와 view 의 기능을 헷갈려했기 때문이었다. 두 함수의 차이는 contiguous 를 이해해야 알 수 있"}</script><link rel="canonical" href="https://www.thespacemoon.com/2021/03/03/pytorch-view-reshape-transpose"><link rel="icon" href="/img/favicon.ico"><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.0/css/all.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@9.12.0/styles/atom-one-light.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@400;600&amp;family=Source+Code+Pro"><link rel="stylesheet" href="/css/default.css"><style>body>.footer,body>.navbar,body>.section{opacity:0}</style><!--!--><!--!--><!--!--><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/lightgallery@1.6.8/dist/css/lightgallery.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/justifiedGallery@3.7.0/dist/css/justifiedGallery.min.css"><script src="https://www.googletagmanager.com/gtag/js?id=UA-131297969-1" async></script><script><!-- hexo-inject:begin --><!-- hexo-inject:end -->window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
    
        gtag('config', 'UA-131297969-1');</script><!--!--><!--!--><script src="https://cdn.jsdelivr.net/npm/pace-js@1.0.2/pace.min.js"></script><link rel="alternate" href="/feed.xml" title="Space Moon" type="application/atom+xml"><!-- hexo-inject:begin --><!-- hexo-inject:end -->
</head><body class="is-2-column"><nav class="navbar navbar-main"><div class="container"><div class="navbar-brand justify-content-center"><a class="navbar-item navbar-logo" href="/"><img src="/img/space_moon.png" alt="Space Moon" height="28"></a></div><div class="navbar-menu"><div class="navbar-start"><a class="navbar-item" href="/">Home</a><a class="navbar-item" href="/archives">Archives</a><a class="navbar-item" href="/categories">Categories</a><a class="navbar-item" href="/tags">Tags</a><a class="navbar-item" href="/about">About</a></div><div class="navbar-end"><a class="navbar-item" target="_blank" rel="external nofollow noopener noreferrer" title="Download on GitHub" href="https://github.com/inmoonlight"><i class="fab fa-github"></i></a><a class="navbar-item is-hidden-tablet catalogue" title="Catalogue" href="javascript:;"><i class="fas fa-list-ul"></i></a><a class="navbar-item search" title="Search" href="javascript:;"><i class="fas fa-search"></i></a></div></div></div></nav><section class="section"><div class="container"><div class="columns"><div class="column order-2 column-main is-9-tablet is-9-desktop is-9-widescreen"><div class="card"><article class="card-content article" role="article"><div class="article-meta size-small is-uppercase level is-mobile"><div class="level-left"><time class="level-item" datetime="2021-03-02T19:22:00.000Z" title="2021-03-02T19:22:00.000Z">2021-03-03</time><span class="level-item"><a class="link-muted" href="/categories/Tech/">Tech</a><span> / </span><a class="link-muted" href="/categories/Tech/Engineering/">Engineering</a></span><span class="level-item">8 minutes read (About 1225 words)</span></div></div><h1 class="title is-3 is-size-4-mobile">PyTorch의 view, transpose, reshape 함수의 차이점 이해하기</h1><div class="content"><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><!-- hexo-inject:begin --><!-- hexo-inject:end -->최근에 pytorch로 간단한 모듈을 재구현하다가 loss와 dev score가 원래
구현된 결과와 달라서 의아해하던 찰나, tensor 차원을 변경하는 과정에서
의도하지 않은 방향으로 구현된 것을 확인하게 되었다. 그리고 그 이유는
<code>transpose</code> 와 <code>view</code> 의 기능을 헷갈려했기
때문이었다. 두 함수의 차이는 <code>contiguous</code> 를 이해해야 알 수
있는 내용이었고, 혹시 이 개념이 헷갈리는 사람들을 위해 간단한 예시를
바탕으로 정리해보았다.</p>
<a id="more"></a>
<p><code>contiguous</code> 란 matrix 의 눈에 보이는 (advertised)
순차적인 shape information 과 실제로 matrix 의 각 데이터가 저장된 위치가
같은지의 여부이다. 아래의 예시에서 <code>t</code> 는
<code>contiguous</code> 하다. 왜냐하면 <code>t[0][0][0]</code> →
<code>t[0][0][1]</code> → <code>t[0][1][0]</code> ... 의 데이터 포인터
위치 (<code>0</code> → <code>1</code> → <code>2</code> ... ) 또한
연속적이기 때문이다. 아직 이해가 되지 않아도 괜찮다. 예시를 좀 더
보자!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = torch.tensor([[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]], \</span><br><span class="line">                 [[<span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>]], \</span><br><span class="line">                 [[<span class="number">12</span>, <span class="number">13</span>], [<span class="number">14</span>, <span class="number">15</span>], [<span class="number">16</span>, <span class="number">17</span>]], \</span><br><span class="line">                 [[<span class="number">18</span>, <span class="number">19</span>], [<span class="number">20</span>, <span class="number">21</span>], [<span class="number">22</span>, <span class="number">23</span>]]])  <span class="comment"># (4, 3, 2)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>print(t) >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">tensor([[[ 0,  1],</span><br><span class="line">         [ 2,  3],</span><br><span class="line">         [ 4,  5]],</span><br><span class="line"></span><br><span class="line">        [[ 6,  7],</span><br><span class="line">         [ 8,  9],</span><br><span class="line">         [10, 11]],</span><br><span class="line"></span><br><span class="line">        [[12, 13],</span><br><span class="line">         [14, 15],</span><br><span class="line">         [16, 17]],</span><br><span class="line"></span><br><span class="line">        [[18, 19],</span><br><span class="line">         [20, 21],</span><br><span class="line">         [22, 23]]])</span><br></pre></td></tr></table></figure>
<h2 id="view">view</h2>
<p><code>view</code> 를 통해 <code>t</code> 라는 tensor의 shape를
변경시켜보았다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tv = t.view(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>print(tv) >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">tensor([[[ 0,  1,  2],</span><br><span class="line">         [ 3,  4,  5]],</span><br><span class="line"></span><br><span class="line">        [[ 6,  7,  8],</span><br><span class="line">         [ 9, 10, 11]],</span><br><span class="line"></span><br><span class="line">        [[12, 13, 14],</span><br><span class="line">         [15, 16, 17]],</span><br><span class="line"></span><br><span class="line">        [[18, 19, 20],</span><br><span class="line">         [21, 22, 23]]])</span><br></pre></td></tr></table></figure>
<p>shape이 <code>(4, 2, 3)</code> 으로 잘 바뀐 것을 확인할 수 있다.
그리고 <code>tv[0][0][0]</code> → <code>tv[0][0][1]</code> →
<code>tv[0][0][2]</code> ... 의 데이터 포인터 위치 (<code>0</code> →
<code>1</code> → <code>2</code> ... ) 또한 연속적이기 때문에
<code>tv</code> 는 <code>contiguous</code> 하다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tv.is_contiguous()</span><br><span class="line">---</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>데이터의 tensor index 순서대로 tensor를 flatten 시켜주는 함수를 통해
<code>t</code> 와 <code>tv</code> 를 비교하면 동일하게 나오는 것을
확인할 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.flatten() == tv.flatten()</span><br><span class="line">---</span><br><span class="line">tensor([<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>,</span><br><span class="line">        <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>])</span><br></pre></td></tr></table></figure>
<p>또한 <code>t</code> 와 <code>tv</code> 의 데이터는 pointer 값이
동일하여 한 쪽의 tensor data 를 수정하면 다른 쪽의 값도 동시에
변경된다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.storage().data_ptr() == tv.storage().data_ptr()  <span class="comment"># data pointer 값이 일치함</span></span><br><span class="line">---</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Modifying view tensor changes base tensor as well.</span></span><br><span class="line">t[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">tv[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">---</span><br><span class="line">tensor(<span class="number">99</span>)</span><br></pre></td></tr></table></figure>
<h2 id="transpose">transpose</h2>
<p><code>transpose</code> 를 통해 <code>t</code> 라는 텐서의 shape을
변경시켜보았다. shape은 <code>tv</code>와 동일하나, 구성이 조금 다른
것을 확인할 수 있다. 참고로, 보통
<code>(batch_size, hidden_dim, input_dim)</code> 을
<code>(batch_size, input_dim, hidden_dim)</code> 으로 바꿔주는 작업을 할
때에 <code>transpose</code> 를 사용한다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt = t.transpose(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># (4, 2, 3)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>print(tt) >folded</span></figcaption><table><tr><td class="code"><pre><span class="line">tensor([[[ 0,  2,  4],</span><br><span class="line">         [ 1,  3,  5]],</span><br><span class="line"></span><br><span class="line">        [[ 6,  8, 10],</span><br><span class="line">         [ 7,  9, 11]],</span><br><span class="line"></span><br><span class="line">        [[12, 14, 16],</span><br><span class="line">         [13, 15, 17]],</span><br><span class="line"></span><br><span class="line">        [[18, 20, 22],</span><br><span class="line">         [19, 21, 23]]])</span><br></pre></td></tr></table></figure>
<p>앞선 예시에서 <code>t</code> 의 데이터 포인터는 <code>0</code> →
<code>1</code> → <code>2</code> ... 순서대로 저장된 것을 알 수 있었다.
<code>t</code>와 <code>tv</code> 모두 데이터 포인터의 물리적 순서와
shape 상에서의 데이터 순서가 같았기 때문에 <code>contiguous</code> 했다.
하지만 <code>tt</code> 의 경우 <code>0</code> → <code>1</code> →
<code>2</code> ... ≠ <code>tt[0][0][0]</code> → <code>tt[0][0][1]</code>
→ <code>tt[0][0][2]</code> ... 이기 때문에 <code>contiguous</code> 하지
않다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.is_contiguous()</span><br><span class="line">---</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><code>tt</code> 를 flatten 시키면 물리적 순서 (<code>0</code> →
<code>1</code> → <code>2</code> ... ) 와 shape 상의 순서가 다른 것을
확인할 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.flatten()</span><br><span class="line">---</span><br><span class="line">tensor([ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">7</span>,  <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>,</span><br><span class="line">        <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>])</span><br></pre></td></tr></table></figure>
<h2 id="contiguous">contiguous</h2>
<p>그렇다면 강제로 물리적 위치를 연속적으로 만들어버리면 어떻게 될까?
겉보기에는 <code>tt</code> 와 별 차이가 없어보인다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.contiguous() == tt</span><br><span class="line">---</span><br><span class="line">tensor([[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>],</span><br><span class="line">         [<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]]])</span><br></pre></td></tr></table></figure>
<p>하지만 각 데이터 포인터를 비교하면 <code>tt.contiguous()</code> 는
<code>0</code> → <code>2</code> → <code>4</code> ... 이고
<code>tt</code> 는 <code>0</code> → <code>1</code> → <code>2</code> 이기
때문에 아래의 값이 False가 나오는 것을 예상해볼 수 있다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.contiguous().storage().data_ptr() == tt.storage().data_ptr()</span><br><span class="line">---</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="reshape">reshape</h2>
<p><code>contiguous</code> 개념을 이해했다면, <code>reshape</code> 과
<code>view</code> 함수의 차이도 알 수 있다. 쉽게 얘기하면
<code>reshape() == contiguous().view()</code> 와 같다.</p>
<p><code>view</code> 는 <code>contiguous</code> 하지 않은
<code>tensor</code> 에 대해서는 적용할 수 없다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.view(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)  <span class="comment"># tt.shape() == (4, 2, 3)</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">RuntimeError                              Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-89</span><span class="number">-785954</span>c0ff12&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 tt.view(4, 3, 2)  # tt.shape() == (4, 2, 3)</span><br><span class="line"></span><br><span class="line">RuntimeError: view size <span class="keyword">is</span> <span class="keyword">not</span> compatible <span class="keyword">with</span> input tenso<span class="string">r's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.contiguous().view(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">---</span><br><span class="line">tensor([[[ <span class="number">0</span>,  <span class="number">2</span>],</span><br><span class="line">         [ <span class="number">4</span>,  <span class="number">1</span>],</span><br><span class="line">         [ <span class="number">3</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">6</span>,  <span class="number">8</span>],</span><br><span class="line">         [<span class="number">10</span>,  <span class="number">7</span>],</span><br><span class="line">         [ <span class="number">9</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">13</span>],</span><br><span class="line">         [<span class="number">15</span>, <span class="number">17</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">18</span>, <span class="number">20</span>],</span><br><span class="line">         [<span class="number">22</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">21</span>, <span class="number">23</span>]]])</span><br></pre></td></tr></table></figure>
<p>하지만 <code>reshape</code> 은 강제로 tensor를
<code>contiguous</code> 하게 만들면서 shape을 변경하기 때문에
가능하다.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.reshape(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">---</span><br><span class="line">tensor([[[ <span class="number">0</span>,  <span class="number">2</span>],</span><br><span class="line">         [ <span class="number">4</span>,  <span class="number">1</span>],</span><br><span class="line">         [ <span class="number">3</span>,  <span class="number">5</span>]],</span><br><span class="line"></span><br><span class="line">        [[ <span class="number">6</span>,  <span class="number">8</span>],</span><br><span class="line">         [<span class="number">10</span>,  <span class="number">7</span>],</span><br><span class="line">         [ <span class="number">9</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">         [<span class="number">16</span>, <span class="number">13</span>],</span><br><span class="line">         [<span class="number">15</span>, <span class="number">17</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">18</span>, <span class="number">20</span>],</span><br><span class="line">         [<span class="number">22</span>, <span class="number">19</span>],</span><br><span class="line">         [<span class="number">21</span>, <span class="number">23</span>]]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tt.reshape(<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>).is_contiguous()</span><br><span class="line">---</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="summary">Summary</h2>
<ul>
<li><code>view</code> : tensor 에 저장된 데이터의 물리적 위치 순서와
index 순서가 일치할 때 (<code>contiguous</code>) shape을 재구성한다. 이
때문에 항상 <code>contiguous</code> 하다는 성질이 보유된다.</li>
<li><code>transpose</code> : tensor 에 저장된 데이터의 물리적 위치
순서와 <strong>상관없이</strong> 수학적 의미의 transpose를 수행한다. 즉,
물리적 위치와 transpose가 수행된 tensor 의 index 순서는 같다는 보장이
없으므로 항상 <code>contiguous</code> 하지 않다.</li>
<li><code>reshape</code> : tensor 에 저장된 데이터의 물리적 위치 순서와
index 순서가 일치하지 않아도 shape을 재구성한 이후에 강제로 일치시킨다.
이 때문에 항상 <code>contiguous</code> 하다는 성질이 보유된다.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://inmoonlight.github.io/notebooks/html/2021-03-03-PyTorch-view-transpose-reshape.html" rel="external nofollow noopener noreferrer" target="_blank">https://inmoonlight.github.io/notebooks/html/2021-03-03-PyTorch-view-transpose-reshape.html</a></li>
<li><a href="https://discuss.pytorch.org/t/contigious-vs-non-contigious-tensor/30107/2" rel="external nofollow noopener noreferrer" target="_blank">https://discuss.pytorch.org/t/contigious-vs-non-contigious-tensor/30107/2</a></li>
</ul>
</div><div class="article-tags size-small mb-4"><span class="mr-2">#</span><a class="link-muted mr-2" rel="tag" href="/tags/pytorch/">pytorch</a></div><!--!--></article></div><!--!--><nav class="post-navigation mt-4 level is-mobile"><div class="level-start"><a class="article-nav-prev level level-item link-muted" href="/2021/07/11/git-merge-strategies"><i class="level-item fas fa-chevron-left"></i><span class="level-item">Git의 다양한 머지 전략 비교 - 우리 팀은 어떤 전략을 도입해야 할까?</span></a></div><div class="level-end"><a class="article-nav-next level level-item link-muted" href="/2021/02/21/pytorch-iterabledataset"><span class="level-item">PyTorch의 IterableDataset을 사용해서 데이터 불러오기</span><i class="level-item fas fa-chevron-right"></i></a></div></nav><div class="card"><div class="card-content"><h3 class="title is-5">Comments</h3><div id="disqus_thread"><noscript>Please enable JavaScript to view the <a href="//disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript></div><script>var disqus_config = function () {
            this.page.url = 'https://www.thespacemoon.com/2021/03/03/pytorch-view-reshape-transpose';
            this.page.identifier = '/2021/03/03/pytorch-view-reshape-transpose';
        };
        (function() {
            var d = document, s = d.createElement('script');  
            s.src = '//' + 'inmoonlight' + '.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
        })();</script></div></div></div><div class="column column-left is-3-tablet is-3-desktop is-3-widescreen  order-1 is-sticky"><div class="card widget" id="toc"><div class="card-content"><div class="menu"><h3 class="menu-label">Catalogue</h3><ul class="menu-list"><li><a class="is-flex" href="#view"><span class="mr-2">1</span><span>view</span></a></li><li><a class="is-flex" href="#transpose"><span class="mr-2">2</span><span>transpose</span></a></li><li><a class="is-flex" href="#contiguous"><span class="mr-2">3</span><span>contiguous</span></a></li><li><a class="is-flex" href="#reshape"><span class="mr-2">4</span><span>reshape</span></a></li><li><a class="is-flex" href="#summary"><span class="mr-2">5</span><span>Summary</span></a></li><li><a class="is-flex" href="#references"><span class="mr-2">6</span><span>References</span></a></li></ul></div></div></div><div class="card widget"><div class="card-content"><div class="menu"><h3 class="menu-label">Categories</h3><ul class="menu-list"><li><a class="level is-mobile is-marginless" href="/categories/Startup/"><span class="level-start"><span class="level-item">Startup</span></span><span class="level-end"><span class="level-item tag">1</span></span></a></li><li><a class="level is-mobile is-marginless" href="/categories/Tech/"><span class="level-start"><span class="level-item">Tech</span></span><span class="level-end"><span class="level-item tag">9</span></span></a><ul class="mr-0"><li><a class="level is-mobile is-marginless" href="/categories/Tech/Engineering/"><span class="level-start"><span class="level-item">Engineering</span></span><span class="level-end"><span class="level-item tag">4</span></span></a></li><li><a class="level is-mobile is-marginless" href="/categories/Tech/ML/"><span class="level-start"><span class="level-item">ML</span></span><span class="level-end"><span class="level-item tag">4</span></span></a></li><li><a class="level is-mobile is-marginless" href="/categories/Tech/Quantum-Computing/"><span class="level-start"><span class="level-item">Quantum Computing</span></span><span class="level-end"><span class="level-item tag">1</span></span></a></li></ul></li></ul></div></div></div><div class="card widget"><div class="card-content"><h3 class="menu-label">Recent</h3><article class="media"><div class="media-content size-small"><p><time datetime="2024-01-13T12:14:00.000Z">2024-01-13</time></p><p class="title is-6"><a class="link-muted" href="/2024/01/13/lessons-learned-in-the-first-2-years-as-a-startup-founder">Lessons learned in my first 2 years as a startup founder</a></p><p class="is-uppercase"><a class="link-muted" href="/categories/Startup/">Startup</a></p></div></article><article class="media"><div class="media-content size-small"><p><time datetime="2021-07-10T16:03:00.000Z">2021-07-11</time></p><p class="title is-6"><a class="link-muted" href="/2021/07/11/git-merge-strategies">Git의 다양한 머지 전략 비교 - 우리 팀은 어떤 전략을 도입해야 할까?</a></p><p class="is-uppercase"><a class="link-muted" href="/categories/Tech/">Tech</a> / <a class="link-muted" href="/categories/Tech/Engineering/">Engineering</a></p></div></article><article class="media"><div class="media-content size-small"><p><time datetime="2021-03-02T19:22:00.000Z">2021-03-03</time></p><p class="title is-6"><a class="link-muted" href="/2021/03/03/pytorch-view-reshape-transpose">PyTorch의 view, transpose, reshape 함수의 차이점 이해하기</a></p><p class="is-uppercase"><a class="link-muted" href="/categories/Tech/">Tech</a> / <a class="link-muted" href="/categories/Tech/Engineering/">Engineering</a></p></div></article><article class="media"><div class="media-content size-small"><p><time datetime="2021-02-21T14:22:00.000Z">2021-02-21</time></p><p class="title is-6"><a class="link-muted" href="/2021/02/21/pytorch-iterabledataset">PyTorch의 IterableDataset을 사용해서 데이터 불러오기</a></p><p class="is-uppercase"><a class="link-muted" href="/categories/Tech/">Tech</a> / <a class="link-muted" href="/categories/Tech/Engineering/">Engineering</a></p></div></article><article class="media"><div class="media-content size-small"><p><time datetime="2021-02-04T05:22:00.000Z">2021-02-04</time></p><p class="title is-6"><a class="link-muted" href="/2021/02/04/pandas-dataframe-iteration-methods">Pandas Dataframe의 다양한 iteration 방법 비교</a></p><p class="is-uppercase"><a class="link-muted" href="/categories/Tech/">Tech</a> / <a class="link-muted" href="/categories/Tech/Engineering/">Engineering</a></p></div></article></div></div></div><!--!--></div></div></section><footer class="footer"><div class="container"><div class="level"><div class="level-start"><a class="footer-logo is-block mb-2" href="/"><img src="/img/space_moon.png" alt="Space Moon" height="28"></a><p class="size-small"><span>&copy; 2024 Jihyung Moon</span>  Powered by <a href="https://hexo.io/" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a> &amp; <a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="external nofollow noopener noreferrer">Icarus</a></p></div><div class="level-end"><div class="field has-addons"><p class="control"><a class="button is-transparent is-large" target="_blank" rel="external nofollow noopener noreferrer" title="Creative Commons" href="https://creativecommons.org/"><i class="fab fa-creative-commons"></i></a></p><p class="control"><a class="button is-transparent is-large" target="_blank" rel="external nofollow noopener noreferrer" title="Attribution 4.0 International" href="https://creativecommons.org/licenses/by/4.0/"><i class="fab fa-creative-commons-by"></i></a></p></div></div></div></div></footer><script src="https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js"></script><script src="https://cdn.jsdelivr.net/npm/moment@2.22.2/min/moment-with-locales.min.js"></script><script>moment.locale("en");</script><script>var IcarusThemeSettings = {
            site: {
                url: 'https://www.thespacemoon.com',
                external_link: {"enable":true,"exclude":[]}
            },
            article: {
                highlight: {
                    clipboard: true,
                    fold: 'unfolded'
                }
            }
        };</script><script src="https://cdn.jsdelivr.net/npm/clipboard@2.0.4/dist/clipboard.min.js" defer></script><script src="/js/animation.js"></script><a id="back-to-top" title="Back to Top" href="javascript:;"><i class="fas fa-chevron-up"></i></a><script src="/js/back_to_top.js" defer></script><!--!--><!--!--><script src="https://cdn.jsdelivr.net/npm/lightgallery@1.6.8/dist/js/lightgallery.min.js" defer></script><script src="https://cdn.jsdelivr.net/npm/justifiedGallery@3.7.0/dist/js/jquery.justifiedGallery.min.js" defer></script><script>window.addEventListener("load", () => {
            if (typeof $.fn.lightGallery === 'function') {
                $('.article').lightGallery({ selector: '.gallery-item' });
            }
            if (typeof $.fn.justifiedGallery === 'function') {
                if ($('.justified-gallery > p > .gallery-item').length) {
                    $('.justified-gallery > p > .gallery-item').unwrap();
                }
                $('.justified-gallery').justifiedGallery();
            }
        });</script><!--!--><!--!--><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css"><script src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" defer></script><script src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" defer></script><script src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/mhchem.js" defer></script><script>window.addEventListener("load", function() {
            document.querySelectorAll('[role="article"] > .content').forEach(function(element) {
                renderMathInElement(element);
            });
        });</script><!--!--><script src="/js/main.js" defer></script><div class="searchbox"><div class="searchbox-container"><div class="searchbox-header"><div class="searchbox-input-container"><input class="searchbox-input" type="text" placeholder="Type something..."></div><a class="searchbox-close" href="javascript:;">×</a></div><div class="searchbox-body"></div></div></div><script src="/js/insight.js" defer></script><script>document.addEventListener('DOMContentLoaded', function () {
            loadInsight({"contentUrl":"/content.json"}, {"hint":"Type something...","untitled":"(Untitled)","posts":"Posts","pages":"Pages","categories":"Categories","tags":"Tags"});
        });</script><!-- hexo-inject:begin --><!-- hexo-inject:end --></body></html>